// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProspectManagerWebApi.Data;

#nullable disable

namespace ProspectManagerWebApi.Migrations
{
    [DbContext(typeof(ProspectManagerDbContext))]
    [Migration("20231110231450_AddRoleToUtilisateur")]
    partial class AddRoleToUtilisateur
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EvenementProduit", b =>
                {
                    b.Property<int>("EvenementsId")
                        .HasColumnType("int");

                    b.Property<int>("ProduitsId")
                        .HasColumnType("int");

                    b.HasKey("EvenementsId", "ProduitsId");

                    b.HasIndex("ProduitsId");

                    b.ToTable("EvenementProduit");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProspectId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProspectId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Evenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEvenement")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProspectId")
                        .HasColumnType("int");

                    b.Property<string>("Resultat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeEvenementId")
                        .HasColumnType("int");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProspectId");

                    b.HasIndex("TypeEvenementId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Modification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AncienneValeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Champ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvenementId")
                        .HasColumnType("int");

                    b.Property<string>("NouvelleValeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProduitProspectProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitProspectProspectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProspectId")
                        .HasColumnType("int");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EvenementId");

                    b.HasIndex("ProspectId");

                    b.HasIndex("UtilisateurId");

                    b.HasIndex("ProduitProspectProduitId", "ProduitProspectProspectId");

                    b.ToTable("Modifications");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.ProduitProspect", b =>
                {
                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("ProspectId")
                        .HasColumnType("int");

                    b.Property<int>("ProbabiliteSucces")
                        .HasColumnType("int");

                    b.HasKey("ProduitId", "ProspectId");

                    b.HasIndex("ProspectId");

                    b.ToTable("ProduitProspect");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Prospect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Departement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecteurActivite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatutId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOrganismeId")
                        .HasColumnType("int");

                    b.Property<int?>("UtilisateurCreationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatutId");

                    b.HasIndex("TypeOrganismeId");

                    b.HasIndex("UtilisateurCreationId");

                    b.ToTable("Prospects");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Statut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuts");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.TypeEvenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesEvenement");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.TypeOrganisme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypesOrganisme");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateConnexion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModificationMotDePasse")
                        .HasColumnType("datetime2");

                    b.Property<string>("Empreinte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("EvenementProduit", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Evenement", null)
                        .WithMany()
                        .HasForeignKey("EvenementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProspectManagerWebApi.Models.Produit", null)
                        .WithMany()
                        .HasForeignKey("ProduitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Contact", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Prospect", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ProspectId");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Evenement", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("ProspectManagerWebApi.Models.Prospect", null)
                        .WithMany("Evenements")
                        .HasForeignKey("ProspectId");

                    b.HasOne("ProspectManagerWebApi.Models.TypeEvenement", "TypeEvenement")
                        .WithMany()
                        .HasForeignKey("TypeEvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProspectManagerWebApi.Models.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Contact");

                    b.Navigation("TypeEvenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Modification", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Contact", null)
                        .WithMany("Modifications")
                        .HasForeignKey("ContactId");

                    b.HasOne("ProspectManagerWebApi.Models.Evenement", null)
                        .WithMany("Modifications")
                        .HasForeignKey("EvenementId");

                    b.HasOne("ProspectManagerWebApi.Models.Prospect", null)
                        .WithMany("Modifications")
                        .HasForeignKey("ProspectId");

                    b.HasOne("ProspectManagerWebApi.Models.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProspectManagerWebApi.Models.ProduitProspect", null)
                        .WithMany("Modifications")
                        .HasForeignKey("ProduitProspectProduitId", "ProduitProspectProspectId");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.ProduitProspect", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Produit", "Produit")
                        .WithMany("ProduitProspects")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProspectManagerWebApi.Models.Prospect", "Prospect")
                        .WithMany("ProduitProspects")
                        .HasForeignKey("ProspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");

                    b.Navigation("Prospect");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Prospect", b =>
                {
                    b.HasOne("ProspectManagerWebApi.Models.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId");

                    b.HasOne("ProspectManagerWebApi.Models.TypeOrganisme", "TypeOrganisme")
                        .WithMany()
                        .HasForeignKey("TypeOrganismeId");

                    b.HasOne("ProspectManagerWebApi.Models.Utilisateur", "UtilisateurCreation")
                        .WithMany()
                        .HasForeignKey("UtilisateurCreationId");

                    b.Navigation("Statut");

                    b.Navigation("TypeOrganisme");

                    b.Navigation("UtilisateurCreation");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Contact", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Evenement", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Produit", b =>
                {
                    b.Navigation("ProduitProspects");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.ProduitProspect", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("ProspectManagerWebApi.Models.Prospect", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Evenements");

                    b.Navigation("Modifications");

                    b.Navigation("ProduitProspects");
                });
#pragma warning restore 612, 618
        }
    }
}
